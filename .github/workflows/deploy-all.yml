name: Deploy

env: 
      MICRO_SERVICES : ('auth-service' 'account-service' 'part-service' 'document-service')
      MICRO : 'auth-service'
      NIL : ""
      REGION: ""
      SERVICE: ""
      HANDLER: ""
      
on:
  
  workflow_dispatch:
    inputs:
          
      choice_stage:
        type: choice
        description: Make a choice for stage
        options:
          - sandbox
          - dev
          - prod
                  
      choice_region:
        type: choice
        description: Make a choice for region
        default: ''
        required: false
        options:
          - all
          - ap-south-1
          - us-east-2
          - ap-northeast-2
          - eu-central-1
                    
      choice_service:
        type: choice
        description: Make a choice for service
        default: ''
        required: false
        options:
          - all
          - auth
          - account
          - part
          - document
          
          
      handler:
        description: Enter handler name
        default: ''
        required: false
        type: string

jobs:
  start_deploy:
    name: build-n-deploy-services
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        
      - name: Tag array
#         if: ${{ github.event_name == 'push' && contains(env.MAIN_BRANCHES, steps.calculate_changed_services.outputs.diff_dest) }}
        run: echo "my service is ${MICRO_SERVICES}"
        
      - name: Tag micro
        run : |
          echo "my service is ${{ env.MICRO }}"
 
   
      - name: display
        run: |
         echo "Stage is ${{ github.event.inputs.choice_stage }}"
         echo "Region is ${{ github.event.inputs.choice_region }}"
         echo "Service is ${{ github.event.inputs.choice_service }}"
         echo "Handler name is ${{ github.event.inputs.handler }}"
         

      
      - name: check stage sandbox
        if: startsWith( github.event.inputs.choice_stage, 'sandbox' )
        run: echo 'Stage is sandbox, set aws credentials for sandbox environment .'
        
      - name: check stage dev 
        if: startsWith( github.event.inputs.choice_stage, 'dev' )
        run: echo 'Stage is dev, set aws credentials for dev environment . '
        
      - name: check stage prod
        if: startsWith( github.event.inputs.choice_stage, 'prod' )
        run: |
            echo 'Stage is prod, set aws credentials for prod environment . '
            
      - name: set all enterd value to variable
        run: 
            STAGE="${{ github.event.inputs.choice_stage }}"
            REGION="${{ github.event.inputs.choice_region }}"
            SERVICE="${{ github.event.inputs.choice_service }}"
            HANDLER="${{ github.event.inputs.handler }}"
          
     
     
      - name: set region options value all to nil
        if: startsWith( github.event.inputs.choice_region, 'all' ) 
        run: |
            echo 'Region is set to nil '
            REGION="${NIL}"
            echo "Hello $NIL nil and $REGION region "
      
      - name: set service options value all to nil
        if: startsWith( github.event.inputs.choice_service, 'all' ) 
        run: |
            echo 'Service is set to nil '
            SERVICE="${NIL}"
            echo "Hello $NIL nil and $SERVICE service "
            
      
      - name: Run script here
        run: |
            STAGE="${{ github.event.inputs.choice_stage }}"
            REGION="${{ github.event.inputs.choice_region }}"
            SERVICE="${{ github.event.inputs.choice_service }}"
            HANDLER="${{ github.event.inputs.handler }}"
            
            echo " scripts/deplpoy-all.sh -t $STAGE -r $REGION -s $SERVICE -h $HANDLER "
            
            if [ ${{ github.event.inputs.choice_region }} == "all" ]; then
                  REGION="${NIL}"
            elif [ ${{ github.event.inputs.choice_service }} == "all" ]; then
                  SERVICE="${NIL}"
            fi
                  
            echo " scripts/deplpoy-all.sh -t $STAGE -r $REGION -s $SERVICE -h $HANDLER "
           
            

